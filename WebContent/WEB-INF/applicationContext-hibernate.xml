<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context definition for Petclinic on Hibernate.
-->

<beans>
	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location"><value>/WEB-INF/jdbc.properties</value></property>
	</bean>
	<!-- Local DataSource that works in any environment -->
	<!-- Note that DriverManagerDataSource does not pool; it is not intended for production -->
	<!-- See JPetStore for an example of using Commons DBCP BasicDataSource as alternative -->
	<!-- See Image Database for an example of using C3P0 ComboPooledDataSource as alternative -->
	
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName"><value>org.hsqldb.jdbcDriver</value></property>
        <property name="url"><value>jdbc:hsqldb:mem:petclinic</value></property>
        <property name="username"><value>sa</value></property>
        <property name="password"><value></value></property>        
    </bean>
    
	
	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource"><ref local="dataSource"/></property>
		<property name="mappingResources">
			<value>petclinic.hbm.xml</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create-drop</prop>
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
				</entry>
				<entry key="post-insert">
					<ref bean="ModelSearchHibernateListener"/>					
				</entry>
				<entry key="post-delete">
					<ref bean="ModelSearchHibernateListener"/>					
				</entry>
				<entry key="post-update">
					<ref bean="ModelSearchHibernateListener"/>					
				</entry>
				
			</map>
		</property>
	</bean>

<!-- HibernateEventInterceptor listener= 
			new HibernateEventInterceptor(
					new SearchInterceptor(
							new DefaultIndexerService(
									new DefaultIndexingPipeline(),
									MemoryIndexWriterFactory.getInstance()))); -->
	
	<!-- MODEL SEARCH: Hibernate Interceptor Configuration  -->
	<bean id="ModelSearchHibernateListener" class="com.jklas.search.interceptors.hibernate.HibernateEventInterceptor">
		<constructor-arg ref="SearchInterceptor"/>
	</bean>
	
	<bean id="SearchInterceptor" class="com.jklas.search.interceptors.SearchInterceptor">
		<constructor-arg ref="OnlineIndexer"/>
	</bean>
	
	<bean id="OnlineIndexer" class="com.jklas.search.indexer.online.OnlineIndexer">
		<constructor-arg ref="DefaultIndexerService"/>
	</bean>
		
	<bean id="DefaultIndexerService" class="com.jklas.search.indexer.DefaultIndexerService">
		<constructor-arg ref="DefaultIndexingPipeline"/>
		<constructor-arg ref="IndexWriterFactory"/>
	</bean>
	 
	<bean id="DefaultIndexingPipeline" class="com.jklas.search.indexer.pipeline.DefaultIndexingPipeline"/>	
	
	<bean id="IndexWriterFactory" class="com.jklas.search.index.memory.MemoryIndexWriterFactory"/>
		
	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory"><ref local="sessionFactory"/></property>
	</bean>
	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->
	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->
	<!--
	  - Petclinic's central data access object: Hibernate implementation.
    -->
	<bean id="clinicTarget" class="com.jklas.sample.petclinic.hibernate.HibernateClinic">
		<property name="sessionFactory"><ref local="sessionFactory"/></property>
	</bean>
	<!--
		- Transactional proxy for Petclinic's central data access object.
		-
		- Defines specific transaction attributes with "readOnly" markers,
		- which is an optimization that is particularly valuable with Hibernate
		- (to suppress unnecessary flush attempts for read-only operations).
		-
		- Note that in a real-life app with multiple transaction proxies,
		- you will probably want to use parent and child bean definitions
		- as described in the manual, to reduce duplication.
    -->
	<bean id="clinic" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager"><ref local="transactionManager"/></property>
		<property name="target"><ref local="clinicTarget"/></property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="store*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
</beans>
