<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE web-app PUBLIC
	"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
	"http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
	<display-name>PetClinic</display-name>
	<description>PetClinic</description>
	
	<context-param>
		<param-name>reloadable</param-name>
		<param-value>false</param-value>
	</context-param>
	
	<context-param>
		<param-name>modelsearch-init-mappings</param-name>
		<param-value>com.jklas.sample.petclinic.Owner;com.jklas.sample.petclinic.Person;com.jklas.sample.petclinic.Vet;com.jklas.sample.petclinic.Pet;com.jklas.sample.petclinic.PetType;com.jklas.sample.petclinic.Visit</param-value>		
	</context-param>
	
	<context-param>
		<param-name>petclinic-init-pettype</param-name>
		<param-value>Dog;Cat;Other</param-value>		
	</context-param>
	
	
	<!--
		- Key of the system property that should specify the root directory of
		this - web app. Applied by WebAppRootListener or Log4jConfigListener.
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>petclinic.root</param-value>
	</context-param>
	<!--
		- Location of the Log4J config file, for initialization and refresh
		checks. - Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	<!--
		- Location of the XML file that defines the root application context.
		- Applied by ContextLoaderServlet. - - Can be set to
		"/WEB-INF/applicationContext-hibernate.xml" for the Hibernate -
		implementation, "/WEB-INF/applicationContext-ojb.xml" for the Apache
		OJB one, - or "/WEB-INF/applicationContext-jdbc.xml" for the JDBC one.
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/applicationContext-hibernate.xml
		</param-value>
	</context-param>
	<!--
		- Configures Log4J for this web app. - As this context specifies a
		context-param "log4jConfigLocation", its file path - is used to load
		the Log4J configuration, including periodic refresh checks. - - Would
		fall back to default Log4J initialization (non-refreshing) if no
		special - context-params are given. - - Exports a "web app root key",
		i.e. a system property that specifies the root - directory of this web
		app, for usage in log file paths. - This web app specifies
		"petclinic.root" (see log4j.properties file).
	-->
	<!-- Leave the listener commented-out if using JBoss -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!--
		- Loads the root application context of this web app at startup, - by
		default from "/WEB-INF/applicationContext.xml". - Note that it is
		preferable to use ContextLoaderListener in a servlet container - that
		follows the Servlet 2.4 initialization order (many Servlet 2.3
		containers do). - - Use
		WebApplicationContextUtils.getWebApplicationContext(servletContext) -
		to access it anywhere in the web application, outside of the
		framework. - - The root context is the parent of all servlet-specific
		contexts. - This means that its beans are automatically available in
		these child contexts, - both for getBean(name) calls and (external)
		bean references.
	-->
	<servlet>
		<servlet-name>context</servlet-name>
		<servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!--
		- Servlet that dispatches request to registered handlers (Controller
		implementations). - Has its own application context, by default
		defined in "{servlet-name}-servlet.xml", - i.e.
		"petclinic-servlet.xml". - - A web app can contain any number of such
		servlets. - Note that this web app has a shared root application
		context, serving as parent - of all DispatcherServlet contexts.
	-->
	<servlet>
		<servlet-name>petclinic</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>SearchMapServlet</servlet-name>
		<servlet-class>com.jklas.sample.petclinic.util.SearchMapServlet</servlet-class>
		<load-on-startup>3</load-on-startup>
	</servlet>
	
	<servlet>
		<servlet-name>SearchSummary</servlet-name>
		<servlet-class>com.jklas.sample.petclinic.servlet.SearchSummary</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	
	<servlet>
		<servlet-name>SearchResults</servlet-name>
		<servlet-class>com.jklas.sample.petclinic.servlet.SearchResults</servlet-class>		
	</servlet>
	
	<!--
		- Maps the petclinic dispatcher to *.htm. All handler mappings in -
		petclinic-servlet.xml will by default be applied to this subpath. - If
		a mapping isn't a /* subpath, the handler mappings are considered -
		relative to the web app root. - - NOTE: A single dispatcher can be
		mapped to multiple paths, like any servlet.
	-->
	
	<servlet-mapping>
		<servlet-name>petclinic</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>SearchSummary</servlet-name>
		<url-pattern>/modelsearch/summary.htm</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>SearchResults</servlet-name>
		<url-pattern>/modelsearch/results.htm</url-pattern>
	</servlet-mapping>

	<session-config>
		<session-timeout>10</session-timeout>
	</session-config>

	<welcome-file-list>
		<!-- Redirects to "welcome.htm" for dispatcher handling -->
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<!-- Displays a stack trace -->
		<location>/WEB-INF/jsp/uncaughtException.jsp</location>
	</error-page>

	<!--
		- Reference to Petclinic database. - Only needed if not using a local
		DataSource but a JNDI one instead.
	-->
</web-app>